- block:
    - name: Get podman user information
      ansible.builtin.getent:
        database: passwd
        key: "{{ podman_user }}"
      register: podman_user_info

    - name: Extract podman UID
      set_fact:
        podman_user_id: "{{ podman_user_info.ansible_facts['getent_passwd'][podman_user][1]}}"

    - name: Get podman group information
      ansible.builtin.getent:
        database: group
        key: "{{ podman_group }}"
      register: podman_group_info

    - name: Extract podman GID
      set_fact:
        podman_group_id: "{{ podman_user_info.ansible_facts['getent_passwd'][podman_group][2]}}"

- name: Create folders for container config files
  ansible.builtin.file:
    path: "{{ podman_appdata_dir }}/{{ item }}"
    state: directory
    owner: "{{ podman_user }}"
    group: "{{ podman_group }}"
    mode: "0755"
  loop:
    - grafana/postgres
    - grafana/data
    - influxdb2/config
    - influxdb2/data

- name: Create folder for Podman containers
  ansible.builtin.file:
    path: "{{ quadlet_dir }}"
    state: directory
    owner: "{{ podman_user }}"
    group: "{{ podman_group }}"
    mode: "0755"

- name: Copy Podman environment files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ quadlet_dir }}"
    owner: "{{ podman_user }}"
    group: "{{ podman_group }}"
    mode: "0600"
  loop:
    - grafana-postgres.env
    - grafana.env

- block:
  - name: Create monitoring pod
    containers.podman.podman_pod:
      name: monitoring
      state: quadlet
      quadlet_filename: monitoring
      quadlet_dir: "{{ quadlet_dir }}"
      infra_name: "monitoring-pod"
      ports:
        - "3000:3000"
        - "8086:8086"

  - name: Create InfluxDB2 quadlet
    containers.podman.podman_container:
      name: influxdb2
      image: docker.io/influxdb:latest
      state: quadlet
      quadlet_filename: influxdb2
      quadlet_dir: "{{ quadlet_dir }}"
      pod: monitoring.pod
      volumes:
        - "{{ podman_appdata_dir }}/influxdb2/config:/etc/influxdb2:Z"
        - "{{ podman_appdata_dir }}/influxdb2/data:/var/lib/influxdb2:Z"
      cap_drop:
        - all
      cap_add:
        - DAC_OVERRIDE
        - SETUID
        - SETGID
        - FOWNER
      quadlet_options:
        - "AutoUpdate=registry"
        - "NoNewPrivileges=true"
        - |
          [Service]
          Restart=always
        - |
          [Install]
          WantedBy=default.target

  - name: Change owner of grafana/data directories to podman_user_id:podman_group_id
    # We need to run Grafana as podman user inside Grafana container
    # Podman is unable to automatically change the owner of directories inside containers
    # so we need to user podman unshare to run chown inside Podman's user namespace
    ansible.builtin.shell: |
      podman unshare chown -R {{ podman_user_id }}:{{ podman_group_id }} {{ podman_appdata_dir }}/grafana/data
    become_user: "{{ podman_user }}"

  - name: Create grafana secret for database password
    containers.podman.podman_secret:
      state: present
      name: grafana_db_passwd
      data: "{{ grafana_db_passwd }}"
    become_user: "{{ podman_user }}"

  - name: Create grafana-postgres quadlet
    containers.podman.podman_container:
        name: grafana-postgres
        image: docker.io/postgres:16.3-alpine
        state: quadlet
        quadlet_filename: grafana-postgres
        quadlet_dir: "{{ quadlet_dir }}"
        pod: monitoring.pod
        volumes:
          - "{{ podman_appdata_dir }}/grafana/postgres:/var/lib/postgresql/data:Z"
        env_file:
          - grafana-postgres.env
        secrets:
          - grafana_db_passwd
        cap_drop:
          - all
        cap_add:
          - DAC_OVERRIDE
          - SETUID
          - SETGID
          - FOWNER
        quadlet_options:
          - "NoNewPrivileges=true"
          - |
            [Service]
            Restart=always
          - |
            [Install]
            WantedBy=default.target

  - name: Create Grafana quadlet
    containers.podman.podman_container:
      name: grafana
      image: docker.io/grafana/grafana:latest
      state: quadlet
      quadlet_filename: grafana
      quadlet_dir: "{{ quadlet_dir }}"
      pod: monitoring.pod
      user: "{{ podman_user_id }}"
      volumes:
        - "{{ podman_appdata_dir }}/grafana/data:/var/lib/grafana:Z"
      env:
        GF_INSTALL_PLUGINS: "grafana-clock-panel"
      env_file:
        - grafana.env
      cap_drop:
        - all
      secrets:
        - grafana_db_passwd
      quadlet_options:
        - "AutoUpdate=registry"
        - "NoNewPrivileges=true"
        - |
          [Unit]
          Requires=grafana-postgres.service
          After=grafana-postgres.service
        - |
          [Service]
          Restart=always
        - |
          [Install]
          WantedBy=default.target

- name: Restart services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: "restarted"
    scope: "user"
    daemon_reload: true
    enabled: true
  become_user: "{{ podman_user }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ podman_user_id }}"
  loop:
  - influxdb2.service
  - grafana-postgres.service
  - grafana.service

- name: Open FirewalldD ports
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  loop:
    - "3000/tcp" # grafana
    - "8086/tcp" # influxdb2
  notify:
    - Reload FirewallD
