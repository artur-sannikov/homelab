- name: Create folders for container config files
  ansible.builtin.file:
    path: "{{ podman_appdata_dir }}/{{ item }}"
    state: directory
    owner: "{{ podman_user }}"
    group: "{{ podman_group }}"
    mode: '0755'
  loop:
    - paperless-ngx/redis
    - paperless-ngx/postgres
    - paperless-ngx/data
    - paperless-ngx/media
    - paperless-ngx/export
    - paperless-ngx/consume
    - stirling-pdf/logs
    - readeck/data
    - freshrss/data
    - librechat/mongodb/data
    - librechat/meilisearch/data
    - changedetection/datastore
    - authentik/postgres/data
    - authentik/redis/data
    - authentik/media
    - authentik/certs
    - myspeed/data

- name: Create folder for Podman containers
  ansible.builtin.file:
    path: "{{ quadlet_dir }}"
    state: directory
    owner: "{{ podman_user }}"
    group: "{{ podman_group }}"
    mode: "0755"

- name: Copy Podman environment files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ quadlet_dir }}"
    owner: "{{ podman_user }}"
    group: "{{ podman_group }}"
    mode: "0600"
  loop:
    - paperless-ngx-redis.env
    - paperless-ngx-postgres.env
    - paperless-ngx.env
    - freshrss.env
    - librechat.env
    - chromium-playwright.env
    - changedetection.env
    - authentik-postgres.env
    - authentik.env
    - stirling-pdf.env

- block:
  - name: Create paperless database password
    containers.podman.podman_secret:
      state: present
      name: paperless_db_paperless_passwd
      data: "{{ paperless_db_paperless_passwd }}"
    become_user: "{{ podman_user }}"

  - name: Create paperless secret paperless_secret_key
    containers.podman.podman_secret:
      state: present
      name: paperless_secret_key
      data: "{{ paperless_secret_key }}"
    become_user: "{{ podman_user }}"

  - name: Create paperless-ngx pod
    containers.podman.podman_pod:
      name: paperless-ngx
      state: quadlet
      quadlet_filename: paperless-ngx
      quadlet_dir: "{{ quadlet_dir }}"
      infra_name: "paperless-ngx-pod"
      ports:
        - "8001:8000"

  - name: Create paperless-ngx-redis Quadlet
    containers.podman.podman_container:
      name: paperless-ngx-redis
      image: docker.io/redis:7.4.0
      state: quadlet
      quadlet_filename: paperless-ngx-redis
      quadlet_dir: "{{ quadlet_dir }}"
      pod: paperless-ngx.pod
      volumes:
        - "{{ podman_appdata_dir }}/paperless-ngx/redis:/data:Z"
      env_file:
        - paperless-ngx-redis.env
      quadlet_options:
        - "NoNewPrivileges=true"
        - |
          [Service]
          Restart=always
        - |
          [Install]
          WantedBy=default.target

  - name: Create paperless-ngx-postgres Quadlet
    containers.podman.podman_container:
      name: paperless-ngx-postgres
      image: docker.io/postgres:16.3
      state: quadlet
      quadlet_filename: paperless-ngx-postgres
      quadlet_dir: "{{ quadlet_dir }}"
      pod: paperless-ngx.pod
      volumes:
        - "{{ podman_appdata_dir }}/paperless-ngx/postgres:/var/lib/postgresql/data:Z"
      env_file:
        - paperless-ngx-postgres.env
      secrets:
        - paperless_db_paperless_passwd
      quadlet_options:
        - "NoNewPrivileges=true"
        - |
          [Service]
          Restart=always
        - |
          [Install]
          WantedBy=default.target

  - name: Create paperless-ngx Quadlet
    containers.podman.podman_container:
      name: paperless-ngx
      image: ghcr.io/paperless-ngx/paperless-ngx:latest
      state: quadlet
      quadlet_filename: paperless-ngx
      quadlet_dir: "{{ quadlet_dir }}"
      pod: paperless-ngx.pod
      volumes:
        - "{{ podman_appdata_dir }}/paperless-ngx/data:/usr/src/paperless/data:Z"
        - "{{ podman_appdata_dir }}/paperless-ngx/media:/usr/src/paperless/media:Z"
        - "{{ podman_appdata_dir }}/paperless-ngx/export:/usr/src/paperless/export:Z"
        - "{{ podman_appdata_dir }}/paperless-ngx/consume:/usr/src/paperless/consume:Z"
      env_file:
        - paperless-ngx.env
      secrets:
        - paperless_secret_key
        - paperless_db_paperless_passwd
      health_cmd: "curl -fs -S --max-time 2 http://localhost:8000"
      health_startup_interval: 30s
      health_startup_retries: 5
      healthcheck_start_period: 20s
      healthcheck_timeout: 10s
      quadlet_options:
        - "AutoUpdate=registry"
        - "NoNewPrivileges=true"
        - |
          [Unit]
          Requires=paperless-ngx-redis.service
          Requires=paperless-ngx-postgres.service
          After=paperless-ngx-redis.service
          After=paperless-ngx-postgres.service
        - |
          [Service]
          Restart=always
        - |
          [Install]
          WantedBy=default.target

- name: Create readeck Quadlet
  containers.podman.podman_container:
    name: readeck
    image: codeberg.org/readeck/readeck:latest
    state: quadlet
    quadlet_filename: readeck
    quadlet_dir: "{{ quadlet_dir }}"
    ports:
      - "8000:8000"
    volumes:
      - "{{ podman_appdata_dir }}/readeck/data:/readeck:Z"
    quadlet_options:
      - "AutoUpdate=registry"
      - "NoNewPrivileges=true"
      - |
        [Service]
        Restart=always
      - |
        [Install]
        WantedBy=default.target

- name: Create stirling-pdf Quadlet
  containers.podman.podman_container:
    name: stirling-pdf
    image: docker.io/frooodle/s-pdf:latest
    state: quadlet
    quadlet_filename: stirling-pdf
    quadlet_dir: "{{ quadlet_dir }}"
    ports:
      - "8080:8080"
    volumes:
      - "{{ podman_appdata_dir }}/stirling-pdf/logs:/logs:Z"
    env_file:
      - stirling-pdf.env
    cap_drop:
      - all
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FSETID
      - FOWNER
      - SETUID
      - SETGID
    quadlet_options:
      - "AutoUpdate=registry"
      - "NoNewPrivileges=true"
      - |
        [Service]
        Restart=always
      - |
        [Install]
        WantedBy=default.target

- name: Create freshrss Quadlet
  containers.podman.podman_container:
    name: freshrss
    image: docker.io/freshrss/freshrss:latest
    state: quadlet
    quadlet_filename: freshrss
    quadlet_dir: "{{ quadlet_dir }}"
    ports:
      - "8089:80"
    volumes:
      - "{{ podman_appdata_dir }}/freshrss/data:/var/www/FreshRSS/data:Z"
    env_file:
      - freshrss.env
    quadlet_options:
      - "AutoUpdate=registry"
      - "NoNewPrivileges=true"
      - |
        [Service]
        Restart=always
      - |
        [Install]
        WantedBy=default.target

- name: Create LibreChat network
  containers.podman.podman_network:
      name: librechat
      quadlet_filename: librechat
      quadlet_dir: "{{ quadlet_dir }}"
      disable_dns: false
      state: quadlet
  become_user: "{{ podman_user }}"

- name: Create LibreChat Quadlet
  containers.podman.podman_container:
    name: librechat
    image: ghcr.io/danny-avila/librechat:v0.7.3
    state: quadlet
    quadlet_filename: librechat
    quadlet_dir: "{{ quadlet_dir }}"
    ports:
      - "3080:3080"
    env_file:
      - librechat.env
    network:
      - librechat.network
    quadlet_options:
      - "NoNewPrivileges=true"
      - |
        [Unit]
        Requires=librechat-mongodb.service
        Requires=librechat-meilisearch.service
        After=librechat-mongodb.service
        After=librechat-meilisearch.service
      - |
        [Service]
        Restart=always
      - |
        [Install]
        WantedBy=default.target

- name: Create LibreChat-mongodb Quadlet
  containers.podman.podman_container:
    name: librechat-mongodb
    image: docker.io/mongo:7.0.12
    state: quadlet
    quadlet_filename: librechat-mongodb
    quadlet_dir: "{{ quadlet_dir }}"
    volumes:
      - "{{ podman_appdata_dir }}/librechat/mongodb/data:/data/db:Z"
    env_file:
      - librechat.env
    network:
      - librechat.network
    quadlet_options:
      - "NoNewPrivileges=true"
      - |
        [Service]
        Restart=always
      - |
        [Install]
        WantedBy=default.target

- name: Create LibreChat-meilisearch Quadlet
  containers.podman.podman_container:
    name: librechat-meilisearch
    image: docker.io/getmeili/meilisearch:v1.0
    state: quadlet
    quadlet_filename: librechat-meilisearch
    quadlet_dir: "{{ quadlet_dir }}"
    volumes:
      - "{{ podman_appdata_dir }}/librechat/meilisearch/data:/meili_data:Z"
    env_file:
      - librechat.env
    network:
      - librechat.network
    quadlet_options:
      - "NoNewPrivileges=true"
      - |
        [Service]
        Restart=always
      - |
        [Install]
        WantedBy=default.target
- block:
  - name: Create changedetection network
    containers.podman.podman_network:
        name: changedetection
        quadlet_filename: changedetection
        quadlet_dir: "{{ quadlet_dir }}"
        disable_dns: false
        state: quadlet
    become_user: "{{ podman_user }}"

  - name: Create chromium-playwright Quadlet
    containers.podman.podman_container:
      name: chromium-playwright
      image: ghcr.io/browserless/chromium
      state: quadlet
      quadlet_filename: chromium-playwright
      quadlet_dir: "{{ quadlet_dir }}"
      env_file:
        - chromium-playwright.env
      network:
        - changedetection.network
      shm_size: "2gb"
      quadlet_options:
        - "AutoUpdate=registry"
        - "NoNewPrivileges=true"
        - |
          [Service]
          Restart=always
        - |
          [Install]
          WantedBy=default.target

  - name: Create changedetection Quadlet
    containers.podman.podman_container:
      name: changedetection
      image: ghcr.io/dgtlmoon/changedetection.io
      state: quadlet
      quadlet_filename: changedetection
      quadlet_dir: "{{ quadlet_dir }}"
      ports:
        - "5000:5000"
      volumes:
        - "{{ podman_appdata_dir }}/changedetection/datastore:/datastore:Z"
      env_file:
        - changedetection.env
      network:
        - changedetection.network
      quadlet_options:
        - "AutoUpdate=registry"
        - "NoNewPrivileges=true"
        - |
          [Unit]
          Requires=chromium-playwright.service
          After=chromium-playwright.service
        - |
          [Service]
          Restart=always
        - |
          [Install]
          WantedBy=default.target

- block:
  - name: Create authentik pod
    containers.podman.podman_pod:
      name: authentik
      state: quadlet
      quadlet_filename: authentik
      quadlet_dir: "{{ quadlet_dir }}"
      infra_name: "authentik-pod"
      ports:
        - "9000:9000"
        - "9443:9443"

  - name: Create authentik-postgres Quadlet
    containers.podman.podman_container:
      name: authentik-postgres
      image: docker.io/library/postgres:16.3
      state: quadlet
      quadlet_filename: authentik-postgres
      quadlet_dir: "{{ quadlet_dir }}"
      pod: authentik.pod
      volumes:
        - "{{ podman_appdata_dir }}/authentik/postgres/data:/var/lib/postgresql/data:Z"
      env_file:
        - authentik-postgres.env
      health_cmd: "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
      health_startup_interval: 30s
      health_startup_retries: 5
      healthcheck_start_period: 20s
      healthcheck_timeout: 10s
      quadlet_options:
        - "NoNewPrivileges=true"
        - |
          [Service]
          Restart=always
        - |
          [Install]
          WantedBy=default.target

  - name: Create authentik-redis Quadlet
    containers.podman.podman_container:
      name: authentik-redis
      image: docker.io/library/redis:7.4.0
      state: quadlet
      quadlet_filename: authentik-redis
      quadlet_dir: "{{ quadlet_dir }}"
      pod: authentik.pod
      volumes:
        - "{{ podman_appdata_dir }}/authentik/redis/data:/data:Z"
      health_cmd: "redis-cli ping | grep PONG"
      health_startup_interval: 30s
      health_startup_retries: 5
      healthcheck_start_period: 20s
      healthcheck_timeout: 10s
      quadlet_options:
        - "NoNewPrivileges=true"
        - "Exec=--save 60 1 --loglevel warning"
        - |
          [Service]
          Restart=always
        - |
          [Install]
          WantedBy=default.target

  - name: Create authentik-server Quadlet
    containers.podman.podman_container:
      name: authentik-server
      image: ghcr.io/goauthentik/server:latest
      state: quadlet
      quadlet_filename: authentik-server
      quadlet_dir: "{{ quadlet_dir }}"
      pod: authentik.pod
      volumes:
        - "{{ podman_appdata_dir }}/authentik/media:/media:z"
      env_file:
        - authentik.env
      quadlet_options:
        - "AutoUpdate=registry"
        - "NoNewPrivileges=true"
        - "Exec=server"
        - |
          [Service]
          Restart=always
        - |
          [Unit]
          Requires=authentik-postgres.service
          Requires=authentik-redis.service
          After=authentik-postgres.service
          After=authentik-redis.service
        - |
          [Install]
          WantedBy=default.target

  - name: Create authentik-worker Quadlet
    containers.podman.podman_container:
      name: authentik-worker
      image: ghcr.io/goauthentik/server:latest
      state: quadlet
      quadlet_filename: authentik-worker
      quadlet_dir: "{{ quadlet_dir }}"
      pod: authentik.pod
      volumes:
        - "{{ podman_appdata_dir }}/authentik/media:/media:z"
        - "{{ podman_appdata_dir }}/authentik/certs:/certs:Z"
      env_file:
        - authentik.env
      quadlet_options:
        - "AutoUpdate=registry"
        - "NoNewPrivileges=true"
        - "Exec=worker"
        - |
          [Service]
          Restart=always
        - |
          [Unit]
          Requires=authentik-postgres.service
          Requires=authentik-redis.service
          After=authentik-postgres.service
          After=authentik-redis.service
        - |
          [Install]
          WantedBy=default.target

  - name: Change owner of authentik/{media,certs} directories to 1000:1000
    # authentik-server and authentik-worker run as authentik user with UID 1000
    # inside these containers
    # Podman is unable to automatically change owner of the directories inside the containers
    # so we need to run podman unshare to run chown inside Podman's user namespace
    ansible.builtin.shell: |
      podman unshare chown -R 1000:1000 {{ podman_appdata_dir }}/authentik
    become_user: "{{ podman_user }}"

  - name: Create myspeed Quadlet
    containers.podman.podman_container:
      name: myspeed
      image: docker.io/germannewsmaker/myspeed:latest
      state: quadlet
      quadlet_filename: myspeed
      quadlet_dir: "{{ quadlet_dir }}"
      ports:
        - "5216:5216"
      volumes:
        - "{{ podman_appdata_dir }}/myspeed/data:/myspeed/data:Z"
      quadlet_options:
        - "AutoUpdate=registry"
        - "NoNewPrivileges=true"
        - |
          [Service]
          Restart=always
        - |
          [Install]
          WantedBy=default.target

- name: Restart services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: "restarted"
    scope: "user"
    daemon_reload: true
    enabled: true
  become_user: "{{ podman_user }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ __user_info.uid }}"
  loop:
  - paperless-ngx-pod.service
  - stirling-pdf.service
  - readeck.service
  - freshrss.service
  - librechat-mongodb.service
  - librechat-meilisearch.service
  - librechat.service
  - chromium-playwright.service
  - changedetection.service
  - authentik-pod.service
  - myspeed.service

- name: Open FirewalldD ports
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  loop:
  - "22/tcp" # ssh
  - "8080/tcp" # stirling-pdf
  - "8089/tcp" # freshrss
  - "8000/tcp" # readeck
  - "8001/tcp" # paperless-ngx
  - "3080/tcp" # librechat
  - "5000/tcp" # changedetection
  - "9000/tcp" # authentik http
  - "9443/tcp" # authentik https
  - "5216/tcp" # myspeed
  notify:
    - Reload FirewallD
